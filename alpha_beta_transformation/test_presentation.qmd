---
title: "Test presentation"
author: Tuyen Huynh
format: 
  revealjs:
    css: styles.css
    scrollable: true
fig-cap-location: bottom
fig-width: 12
fig-height: 7
fig-align: center
crossref:
  fig-labels: arabic
  title-delim: "**.**"
---

```{r include=FALSE}
library(zoo)

source("../time_series_modelling/data_weekly.R")
theme_set(theme_bw())

# alpha perfs
alpha_precip_perfs <- read_rds("./grid_perfs/alpha_precip_perfs.rds")
alpha_temp_perfs <- read_rds("./grid_perfs/alpha_temp_perfs.rds")
alpha_rh_perfs <- read_rds("./grid_perfs/alpha_rh_perfs.rds")
alpha_models_res <- read_csv("./grid_perfs/alpha_poisson_perfs.csv")
# beta perfs
beta_precip_perfs <- read_rds("./grid_perfs/beta_precip_perfs.rds")
beta_temp_perfs <- read_rds("./grid_perfs/beta_temp_perfs.rds")
beta_rh_perfs <- read_rds("./grid_perfs/beta_rh_perfs.rds")
beta_models_res <- read_csv("./grid_perfs/beta_poisson_perfs.csv")



tsibble_rollsum <- function(df, varcol, datecol, alpha = 10) {
  alpha_df <- zoo(df %>% pull(varcol), df %>% pull(datecol))
  alpha_df %>%
    rollsum(k = alpha) %>%
    timetk::tk_tbl() %>%
    as_tsibble(index = "index")
}
```

# Data description

## Epidemiological data {.smaller}

-   **Source**: Ho Chi Minh City CDC
-   **Temporal coverage**: 2000 -- 2022 (inclusive)
    -   **Train set**: 2000 -- 2017
    -   **Validation set**: 2018
    -   **Test set**: 2019
-   **Format**: Weekly aggregated admission
    -   Raw format is line listing -- each case admission is one row
-   **Spatial coverage**: Ho Chi Minh City
-   In-patient cases only
    -   out-patient data is only available from 2017

------------------------------------------------------------------------

```{r}
#| label: fig-incidence_weekly_ts
#| fig-cap: Dengue weekly incidence time series
#| echo: false
ggplot(incidence_weekly_df, aes(x = date_admitted, y = n)) +
  geom_step() +
  scale_x_yearweek(
    "Date",
    breaks = yearweek(paste0(seq(2000, 2023, 1), " W01")), minor_breaks = NULL,
    labels = as.character(seq(2000, 2023, 1))
  ) +
  scale_y_continuous("Case admitted")
```

------------------------------------------------------------------------

```{r}
#| label: fig-incidence_weekly_ts_splits
#| fig-cap: Train - validation - test set splits
#| echo: false
incidence_weekly_df %>%
  filter_index("2000 W01" ~ "2019 W52") %>%
  ggplot(aes(x = date_admitted, y = n)) +
  geom_step() +
  geom_vline(xintercept = as.Date(yearweek("2018 W01")), color = "red") +
  geom_vline(xintercept = as.Date(yearweek("2019 W01")), color = "red") +
  scale_x_yearweek(
    "Date",
    breaks = yearweek(paste0(seq(2000, 2020, 1), " W01")), minor_breaks = NULL,
    labels = as.character(seq(2000, 2020, 1))
  ) +
  scale_y_continuous("Case admitted")
```

## Meteorological data {.smaller}

-   **Source**: ERA5 -- ECMWF atmospheric reanalysis (5th gen)
    -   **Variables**: 2m temperature, total precipitation, relative humidity
    -   All variables are daily aggregated
-   **Temporal coverage**: 1999 -- 2022 (inclusive)
    -   **Train set**: 2000 -- 2017
    -   **Validation set**: 2018
    -   **Test set**: 2019
-   Temporal resolution: Daily
-   Spatial coverage: Ho Chi Minh City\*

*\* cropped by Ho Chi Minh City 10km buffer bounding box and then spatially aggregated in R*

------------------------------------------------------------------------

```{r}
#| label: fig-t2m_weekly_ts
#| fig-cap: Weekly average 2m temperature
#| echo: false
hcmc_temp_df %>%
  ggplot(aes(x = date, y = t2m)) +
  geom_line() +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
  scale_x_yearweek(
    "Date",
    breaks = yearweek(paste0(seq(1999, 2023, 1), " W01")), minor_breaks = NULL,
    labels = as.character(seq(1999, 2023, 1))
  ) +
  scale_y_continuous("Degree Celsius", breaks = seq(22, 32, 2))
```

------------------------------------------------------------------------

```{r}
#| label: fig-precip_weekly_ts
#| fig-cap: Weekly total precipitation
#| echo: false
hcmc_precip_df %>%
  ggplot(aes(x = date, y = precip)) +
  geom_line() +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
  scale_x_yearweek(
    "Week",
    breaks = yearweek(paste0(seq(1999, 2023, 1), " W01")), minor_breaks = NULL,
    labels = as.character(seq(1999, 2023, 1))
  ) +
  scale_y_continuous("Millimeters")
```

------------------------------------------------------------------------

```{r}
#| label: fig-rh_weekly_ts
#| fig-cap: Weekly average relative humidity
#| echo: false
hcmc_rh_df %>%
  ggplot(aes(x = date, y = rh)) +
  geom_line() +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
  scale_x_yearweek(
    "Week",
    breaks = yearweek(paste0(seq(1999, 2023, 1), " W01")), minor_breaks = NULL,
    labels = as.character(seq(1999, 2023, 1))
  ) +
  scale_y_continuous("Percent")
```

# Accumulation effect (alpha)

## Description {.smaller}

-   At every lag $k$ for covariables, we perform a summation from the past $\alpha$ time points up until $k$.
-   We call this the accumulation effect transformation. $\alpha$ and $k$ are hyperparameters that will be tuned to find the best value (based on forecast RMSE).

![Accumulation effect](./accum_effect.png)

## Hyperparameter tuning results

```{r}
#| label: fig-t2m_alpha_res
#| fig-cap: Accumulation and lag effect on 2m temperature, 52-week forecast RMSE
#| echo: false
best_t2m_param <- alpha_temp_perfs %>% filter(RMSE == min(RMSE))
alpha_temp_perfs %>%
  ggplot(aes(x = lag, y = alpha)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_t2m_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Accumulated weeks (alpha)")
```

------------------------------------------------------------------------

```{r}
#| label: fig-precip_alpha_res
#| fig-cap: Accumulation and lag effect on precipitation, 52-week forecast RMSE
#| echo: false
best_precip_param <- alpha_precip_perfs %>% filter(RMSE == min(RMSE))
alpha_precip_perfs %>%
  ggplot(aes(x = lag, y = alpha)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_precip_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Accumulated weeks (alpha)")
```

------------------------------------------------------------------------

```{r}
#| label: fig-rh_alpha_res
#| fig-cap: Accumulation and lag effect on relative humidity, 52-week forecast RMSE
#| echo: false
best_rh_param <- alpha_rh_perfs %>% filter(RMSE == min(RMSE))
alpha_rh_perfs %>%
  ggplot(aes(x = lag, y = alpha)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_rh_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Accumulated weeks (alpha)")
```

## Testing {.smaller}

-   Now we fit 2 Poisson regression models, one model will have untransformed non-lagged covariables, the other model will have accumulated and lagged covariables. The forecast horizon will be 4 weeks (i.e. week 1-4 in 2019). Each model type will have all possible combinations of covariables.

```{r}
#| label: tbl-alpha_effect_results
#| tbl-cap: Poisson regression models with and without accumulation effect RMSE
knitr::kable(alpha_models_res)
```

---

```{r}
#| label: fig-alpha_effect_results_plot
#| fig-cap: Poisson lagged regression models with and without accumulation effect RMSE
#| echo: false
alpha_models_res %>%
  mutate(type = case_when(
    startsWith(model, "Poisson accum lagged") ~ "Poisson with accumulation and lagged effect",
    .default = "Poisson"
  )) %>%
  group_by(type) %>%
  mutate(mean_rmse = mean(RMSE)) %>%
  ggplot() +
  geom_col(aes(y = model, x = RMSE)) +
  geom_vline(aes(xintercept = mean_rmse), color = "red") +
  scale_x_continuous("Root Mean Squared Error (RMSE)", breaks = seq(0, 800, 100)) +
  scale_y_discrete("Model configuration") +
  facet_wrap(~type, ncol = 1, scales = "free_y")
```


# Delay effect (beta)

## Description {.smaller}

-   At every lag $k$ for covariables, we perform an average weighted by a kernel. The shape of this kernel will be defined by $\beta$.
-   We call this the delay effect transformation. $\beta$ and $k$ are hyperparameters that will be tuned to find the best value (based on forecast RMSE).

![Delay effect](./delay_effect.png)

--- 

-   Other possible hyperparameters are (1) the kernel that is being used and (2) the width of the lag window, i.e. the number of time points around a lag.
-   For the moment, the kernel being used is a Gaussian kernel (or filter), and the lag window width is 11.

## Hyperparameter tuning results

```{r}
#| label: fig-t2m_beta_res
#| fig-cap: Delay and lag effect on 2m temperature, 52-week forecast RMSE
#| echo: false
best_t2m_param <- beta_temp_perfs %>% filter(RMSE == min(RMSE))
beta_temp_perfs %>%
  ggplot(aes(x = lag, y = beta)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_t2m_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Gaussian standard deviation (beta)")
```

------------------------------------------------------------------------

```{r}
#| label: fig-precip_beta_res
#| fig-cap: Delay and lag effect on precipitation, 52-week forecast RMSE
#| echo: false
best_precip_param <- beta_precip_perfs %>% filter(RMSE == min(RMSE))
beta_precip_perfs %>%
  ggplot(aes(x = lag, y = beta)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_precip_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Gaussian standard deviation (beta)")
```

------------------------------------------------------------------------

```{r}
#| label: fig-rh_beta_res
#| fig-cap: Delay and lag effect on relative humidity, 52-week forecast RMSE
#| echo: false
best_rh_param <- beta_rh_perfs %>% filter(RMSE == min(RMSE))
beta_rh_perfs %>%
  ggplot(aes(x = lag, y = beta)) +
  geom_tile(aes(fill = RMSE)) +
  geom_point(data = best_rh_param, shape = 4, color = "red", size = 2, stroke = 1) +
  scale_fill_viridis_c() +
  scale_x_continuous("Lagged weeks", breaks = seq(0, 50, 10)) +
  scale_y_continuous("Gaussian standard deviation (beta)")
```

## Testing {.smaller}

-   Same set up as before, with delayed and lagged covariables instead.

```{r}
#| label: tbl-beta_effect_results
#| tbl-cap: Poisson lagged regression models with and without delayed effect RMSE
knitr::kable(beta_models_res)
```

---

```{r}
#| label: fig-beta_effect_results_plot
#| fig-cap: Poisson lagged regression models with and without delayed effect RMSE
#| echo: false
beta_models_res %>%
  mutate(type = case_when(
    startsWith(model, "Poisson delayed lagged") ~ "Poisson with delayed and lagged effect",
    .default = "Poisson"
  )) %>%
  group_by(type) %>%
  mutate(mean_rmse = mean(RMSE)) %>%
  ggplot() +
  geom_col(aes(y = model, x = RMSE)) +
  geom_vline(aes(xintercept = mean_rmse), color = "red") +
  scale_x_continuous("Root Mean Squared Error (RMSE)", breaks = seq(0, 800, 100)) +
  scale_y_discrete("Model configuration") +
  facet_wrap(~type, ncol = 1, scales = "free_y")
```




## Going to sleep

-   Get in bed
-   Count sheep
